/* automatically generated by rust-bindgen 0.55.1 */

pub const __GNUC_VA_LIST: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 31;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 0;
pub const __LONG_DOUBLE_USES_FLOAT128: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __ENUM_IDTYPE_T: u32 = 1;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __HAVE_FLOAT128: u32 = 1;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _SYS_TYPES_H: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 64;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 48;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _ALLOCA_H: u32 = 1;
pub const _INTTYPES_H: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const ____gwchar_t_defined: u32 = 1;
pub const __PRI64_PREFIX: &'static [u8; 2usize] = b"l\0";
pub const __PRIPTR_PREFIX: &'static [u8; 2usize] = b"l\0";
pub const PRId8: &'static [u8; 2usize] = b"d\0";
pub const PRId16: &'static [u8; 2usize] = b"d\0";
pub const PRId32: &'static [u8; 2usize] = b"d\0";
pub const PRId64: &'static [u8; 3usize] = b"ld\0";
pub const PRIdLEAST8: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST16: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST32: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST64: &'static [u8; 3usize] = b"ld\0";
pub const PRIdFAST8: &'static [u8; 2usize] = b"d\0";
pub const PRIdFAST16: &'static [u8; 3usize] = b"ld\0";
pub const PRIdFAST32: &'static [u8; 3usize] = b"ld\0";
pub const PRIdFAST64: &'static [u8; 3usize] = b"ld\0";
pub const PRIi8: &'static [u8; 2usize] = b"i\0";
pub const PRIi16: &'static [u8; 2usize] = b"i\0";
pub const PRIi32: &'static [u8; 2usize] = b"i\0";
pub const PRIi64: &'static [u8; 3usize] = b"li\0";
pub const PRIiLEAST8: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST16: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST32: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST64: &'static [u8; 3usize] = b"li\0";
pub const PRIiFAST8: &'static [u8; 2usize] = b"i\0";
pub const PRIiFAST16: &'static [u8; 3usize] = b"li\0";
pub const PRIiFAST32: &'static [u8; 3usize] = b"li\0";
pub const PRIiFAST64: &'static [u8; 3usize] = b"li\0";
pub const PRIo8: &'static [u8; 2usize] = b"o\0";
pub const PRIo16: &'static [u8; 2usize] = b"o\0";
pub const PRIo32: &'static [u8; 2usize] = b"o\0";
pub const PRIo64: &'static [u8; 3usize] = b"lo\0";
pub const PRIoLEAST8: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST16: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST32: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST64: &'static [u8; 3usize] = b"lo\0";
pub const PRIoFAST8: &'static [u8; 2usize] = b"o\0";
pub const PRIoFAST16: &'static [u8; 3usize] = b"lo\0";
pub const PRIoFAST32: &'static [u8; 3usize] = b"lo\0";
pub const PRIoFAST64: &'static [u8; 3usize] = b"lo\0";
pub const PRIu8: &'static [u8; 2usize] = b"u\0";
pub const PRIu16: &'static [u8; 2usize] = b"u\0";
pub const PRIu32: &'static [u8; 2usize] = b"u\0";
pub const PRIu64: &'static [u8; 3usize] = b"lu\0";
pub const PRIuLEAST8: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST16: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST32: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST64: &'static [u8; 3usize] = b"lu\0";
pub const PRIuFAST8: &'static [u8; 2usize] = b"u\0";
pub const PRIuFAST16: &'static [u8; 3usize] = b"lu\0";
pub const PRIuFAST32: &'static [u8; 3usize] = b"lu\0";
pub const PRIuFAST64: &'static [u8; 3usize] = b"lu\0";
pub const PRIx8: &'static [u8; 2usize] = b"x\0";
pub const PRIx16: &'static [u8; 2usize] = b"x\0";
pub const PRIx32: &'static [u8; 2usize] = b"x\0";
pub const PRIx64: &'static [u8; 3usize] = b"lx\0";
pub const PRIxLEAST8: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST16: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST32: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST64: &'static [u8; 3usize] = b"lx\0";
pub const PRIxFAST8: &'static [u8; 2usize] = b"x\0";
pub const PRIxFAST16: &'static [u8; 3usize] = b"lx\0";
pub const PRIxFAST32: &'static [u8; 3usize] = b"lx\0";
pub const PRIxFAST64: &'static [u8; 3usize] = b"lx\0";
pub const PRIX8: &'static [u8; 2usize] = b"X\0";
pub const PRIX16: &'static [u8; 2usize] = b"X\0";
pub const PRIX32: &'static [u8; 2usize] = b"X\0";
pub const PRIX64: &'static [u8; 3usize] = b"lX\0";
pub const PRIXLEAST8: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST16: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST32: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST64: &'static [u8; 3usize] = b"lX\0";
pub const PRIXFAST8: &'static [u8; 2usize] = b"X\0";
pub const PRIXFAST16: &'static [u8; 3usize] = b"lX\0";
pub const PRIXFAST32: &'static [u8; 3usize] = b"lX\0";
pub const PRIXFAST64: &'static [u8; 3usize] = b"lX\0";
pub const PRIdMAX: &'static [u8; 3usize] = b"ld\0";
pub const PRIiMAX: &'static [u8; 3usize] = b"li\0";
pub const PRIoMAX: &'static [u8; 3usize] = b"lo\0";
pub const PRIuMAX: &'static [u8; 3usize] = b"lu\0";
pub const PRIxMAX: &'static [u8; 3usize] = b"lx\0";
pub const PRIXMAX: &'static [u8; 3usize] = b"lX\0";
pub const PRIdPTR: &'static [u8; 3usize] = b"ld\0";
pub const PRIiPTR: &'static [u8; 3usize] = b"li\0";
pub const PRIoPTR: &'static [u8; 3usize] = b"lo\0";
pub const PRIuPTR: &'static [u8; 3usize] = b"lu\0";
pub const PRIxPTR: &'static [u8; 3usize] = b"lx\0";
pub const PRIXPTR: &'static [u8; 3usize] = b"lX\0";
pub const SCNd8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNd16: &'static [u8; 3usize] = b"hd\0";
pub const SCNd32: &'static [u8; 2usize] = b"d\0";
pub const SCNd64: &'static [u8; 3usize] = b"ld\0";
pub const SCNdLEAST8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNdLEAST16: &'static [u8; 3usize] = b"hd\0";
pub const SCNdLEAST32: &'static [u8; 2usize] = b"d\0";
pub const SCNdLEAST64: &'static [u8; 3usize] = b"ld\0";
pub const SCNdFAST8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNdFAST16: &'static [u8; 3usize] = b"ld\0";
pub const SCNdFAST32: &'static [u8; 3usize] = b"ld\0";
pub const SCNdFAST64: &'static [u8; 3usize] = b"ld\0";
pub const SCNi8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNi16: &'static [u8; 3usize] = b"hi\0";
pub const SCNi32: &'static [u8; 2usize] = b"i\0";
pub const SCNi64: &'static [u8; 3usize] = b"li\0";
pub const SCNiLEAST8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNiLEAST16: &'static [u8; 3usize] = b"hi\0";
pub const SCNiLEAST32: &'static [u8; 2usize] = b"i\0";
pub const SCNiLEAST64: &'static [u8; 3usize] = b"li\0";
pub const SCNiFAST8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNiFAST16: &'static [u8; 3usize] = b"li\0";
pub const SCNiFAST32: &'static [u8; 3usize] = b"li\0";
pub const SCNiFAST64: &'static [u8; 3usize] = b"li\0";
pub const SCNu8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNu16: &'static [u8; 3usize] = b"hu\0";
pub const SCNu32: &'static [u8; 2usize] = b"u\0";
pub const SCNu64: &'static [u8; 3usize] = b"lu\0";
pub const SCNuLEAST8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNuLEAST16: &'static [u8; 3usize] = b"hu\0";
pub const SCNuLEAST32: &'static [u8; 2usize] = b"u\0";
pub const SCNuLEAST64: &'static [u8; 3usize] = b"lu\0";
pub const SCNuFAST8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNuFAST16: &'static [u8; 3usize] = b"lu\0";
pub const SCNuFAST32: &'static [u8; 3usize] = b"lu\0";
pub const SCNuFAST64: &'static [u8; 3usize] = b"lu\0";
pub const SCNo8: &'static [u8; 4usize] = b"hho\0";
pub const SCNo16: &'static [u8; 3usize] = b"ho\0";
pub const SCNo32: &'static [u8; 2usize] = b"o\0";
pub const SCNo64: &'static [u8; 3usize] = b"lo\0";
pub const SCNoLEAST8: &'static [u8; 4usize] = b"hho\0";
pub const SCNoLEAST16: &'static [u8; 3usize] = b"ho\0";
pub const SCNoLEAST32: &'static [u8; 2usize] = b"o\0";
pub const SCNoLEAST64: &'static [u8; 3usize] = b"lo\0";
pub const SCNoFAST8: &'static [u8; 4usize] = b"hho\0";
pub const SCNoFAST16: &'static [u8; 3usize] = b"lo\0";
pub const SCNoFAST32: &'static [u8; 3usize] = b"lo\0";
pub const SCNoFAST64: &'static [u8; 3usize] = b"lo\0";
pub const SCNx8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNx16: &'static [u8; 3usize] = b"hx\0";
pub const SCNx32: &'static [u8; 2usize] = b"x\0";
pub const SCNx64: &'static [u8; 3usize] = b"lx\0";
pub const SCNxLEAST8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNxLEAST16: &'static [u8; 3usize] = b"hx\0";
pub const SCNxLEAST32: &'static [u8; 2usize] = b"x\0";
pub const SCNxLEAST64: &'static [u8; 3usize] = b"lx\0";
pub const SCNxFAST8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNxFAST16: &'static [u8; 3usize] = b"lx\0";
pub const SCNxFAST32: &'static [u8; 3usize] = b"lx\0";
pub const SCNxFAST64: &'static [u8; 3usize] = b"lx\0";
pub const SCNdMAX: &'static [u8; 3usize] = b"ld\0";
pub const SCNiMAX: &'static [u8; 3usize] = b"li\0";
pub const SCNoMAX: &'static [u8; 3usize] = b"lo\0";
pub const SCNuMAX: &'static [u8; 3usize] = b"lu\0";
pub const SCNxMAX: &'static [u8; 3usize] = b"lx\0";
pub const SCNdPTR: &'static [u8; 3usize] = b"ld\0";
pub const SCNiPTR: &'static [u8; 3usize] = b"li\0";
pub const SCNoPTR: &'static [u8; 3usize] = b"lo\0";
pub const SCNuPTR: &'static [u8; 3usize] = b"lu\0";
pub const SCNxPTR: &'static [u8; 3usize] = b"lx\0";
pub const PLVERSION: u32 = 80202;
pub const PLVERSION_TAG: &'static [u8; 1usize] = b"\0";
pub const PL_FLI_VERSION: u32 = 2;
pub const PL_REC_VERSION: u32 = 3;
pub const PL_QLF_LOADVERSION: u32 = 67;
pub const PL_QLF_VERSION: u32 = 67;
pub const TRUE: u32 = 1;
pub const FALSE: u32 = 0;
pub const PL_VARIABLE: u32 = 1;
pub const PL_ATOM: u32 = 2;
pub const PL_INTEGER: u32 = 3;
pub const PL_RATIONAL: u32 = 4;
pub const PL_FLOAT: u32 = 5;
pub const PL_STRING: u32 = 6;
pub const PL_TERM: u32 = 7;
pub const PL_NIL: u32 = 8;
pub const PL_BLOB: u32 = 9;
pub const PL_LIST_PAIR: u32 = 10;
pub const PL_FUNCTOR: u32 = 11;
pub const PL_LIST: u32 = 12;
pub const PL_CHARS: u32 = 13;
pub const PL_POINTER: u32 = 14;
pub const PL_CODE_LIST: u32 = 15;
pub const PL_CHAR_LIST: u32 = 16;
pub const PL_BOOL: u32 = 17;
pub const PL_FUNCTOR_CHARS: u32 = 18;
pub const _PL_PREDICATE_INDICATOR: u32 = 19;
pub const PL_SHORT: u32 = 20;
pub const PL_INT: u32 = 21;
pub const PL_LONG: u32 = 22;
pub const PL_DOUBLE: u32 = 23;
pub const PL_NCHARS: u32 = 24;
pub const PL_UTF8_CHARS: u32 = 25;
pub const PL_UTF8_STRING: u32 = 26;
pub const PL_INT64: u32 = 27;
pub const PL_NUTF8_CHARS: u32 = 28;
pub const PL_NUTF8_CODES: u32 = 29;
pub const PL_NUTF8_STRING: u32 = 30;
pub const PL_NWCHARS: u32 = 31;
pub const PL_NWCODES: u32 = 32;
pub const PL_NWSTRING: u32 = 33;
pub const PL_MBCHARS: u32 = 34;
pub const PL_MBCODES: u32 = 35;
pub const PL_MBSTRING: u32 = 36;
pub const PL_INTPTR: u32 = 37;
pub const PL_CHAR: u32 = 38;
pub const PL_CODE: u32 = 39;
pub const PL_BYTE: u32 = 40;
pub const PL_PARTIAL_LIST: u32 = 41;
pub const PL_CYCLIC_TERM: u32 = 42;
pub const PL_NOT_A_LIST: u32 = 43;
pub const PL_DICT: u32 = 44;
pub const FF_READONLY: u32 = 4096;
pub const FF_KEEP: u32 = 8192;
pub const FF_NOCREATE: u32 = 16384;
pub const FF_FORCE: u32 = 32768;
pub const FF_MASK: u32 = 61440;
pub const PL_FIRST_CALL: u32 = 0;
pub const PL_CUTTED: u32 = 1;
pub const PL_PRUNED: u32 = 1;
pub const PL_REDO: u32 = 2;
pub const PL_FA_NOTRACE: u32 = 1;
pub const PL_FA_TRANSPARENT: u32 = 2;
pub const PL_FA_NONDETERMINISTIC: u32 = 4;
pub const PL_FA_VARARGS: u32 = 8;
pub const PL_FA_CREF: u32 = 16;
pub const PL_FA_ISO: u32 = 32;
pub const PL_FA_META: u32 = 64;
pub const PL_Q_NORMAL: u32 = 2;
pub const PL_Q_NODEBUG: u32 = 4;
pub const PL_Q_CATCH_EXCEPTION: u32 = 8;
pub const PL_Q_PASS_EXCEPTION: u32 = 16;
pub const PL_Q_ALLOW_YIELD: u32 = 32;
pub const PL_Q_EXT_STATUS: u32 = 64;
pub const PL_S_EXCEPTION: i32 = -1;
pub const PL_S_FALSE: u32 = 0;
pub const PL_S_TRUE: u32 = 1;
pub const PL_S_LAST: u32 = 2;
pub const PL_ASSERTZ: u32 = 0;
pub const PL_ASSERTA: u32 = 1;
pub const PL_CREATE_THREAD_LOCAL: u32 = 16;
pub const PL_CREATE_INCREMENTAL: u32 = 32;
pub const PL_BLOB_MAGIC_B: u32 = 1965636096;
pub const PL_BLOB_VERSION: u32 = 1;
pub const PL_BLOB_MAGIC: u32 = 1965636097;
pub const PL_BLOB_UNIQUE: u32 = 1;
pub const PL_BLOB_TEXT: u32 = 2;
pub const PL_BLOB_NOCOPY: u32 = 4;
pub const PL_BLOB_WCHAR: u32 = 8;
pub const PL_FILE_ABSOLUTE: u32 = 1;
pub const PL_FILE_OSPATH: u32 = 2;
pub const PL_FILE_SEARCH: u32 = 4;
pub const PL_FILE_EXIST: u32 = 8;
pub const PL_FILE_READ: u32 = 16;
pub const PL_FILE_WRITE: u32 = 32;
pub const PL_FILE_EXECUTE: u32 = 64;
pub const PL_FILE_NOERRORS: u32 = 128;
pub const CVT_ATOM: u32 = 1;
pub const CVT_STRING: u32 = 2;
pub const CVT_LIST: u32 = 4;
pub const CVT_INTEGER: u32 = 8;
pub const CVT_RATIONAL: u32 = 16;
pub const CVT_FLOAT: u32 = 32;
pub const CVT_VARIABLE: u32 = 64;
pub const CVT_NUMBER: u32 = 48;
pub const CVT_ATOMIC: u32 = 51;
pub const CVT_WRITE: u32 = 128;
pub const CVT_WRITE_CANONICAL: u32 = 128;
pub const CVT_WRITEQ: u32 = 192;
pub const CVT_ALL: u32 = 55;
pub const CVT_MASK: u32 = 4095;
pub const CVT_EXCEPTION: u32 = 4096;
pub const CVT_VARNOFAIL: u32 = 8192;
pub const BUF_DISCARDABLE: u32 = 0;
pub const BUF_STACK: u32 = 65536;
pub const BUF_MALLOC: u32 = 131072;
pub const BUF_ALLOW_STACK: u32 = 262144;
pub const BUF_RING: u32 = 65536;
pub const REP_ISO_LATIN_1: u32 = 0;
pub const REP_UTF8: u32 = 1048576;
pub const REP_MB: u32 = 2097152;
pub const REP_FN: u32 = 2097152;
pub const PL_DIFF_LIST: u32 = 16777216;
pub const PL_DISPATCH_NOWAIT: u32 = 0;
pub const PL_DISPATCH_WAIT: u32 = 1;
pub const PL_DISPATCH_INSTALLED: u32 = 2;
pub const PL_DISPATCH_INPUT: u32 = 0;
pub const PL_DISPATCH_TIMEOUT: u32 = 1;
pub const PL_SIGSYNC: u32 = 65536;
pub const PL_SIGNOFRAME: u32 = 131072;
pub const PLSIG_THROW: u32 = 2;
pub const PLSIG_SYNC: u32 = 4;
pub const PLSIG_NOFRAME: u32 = 8;
pub const PL_ACTION_TRACE: u32 = 1;
pub const PL_ACTION_DEBUG: u32 = 2;
pub const PL_ACTION_BACKTRACE: u32 = 3;
pub const PL_ACTION_BREAK: u32 = 4;
pub const PL_ACTION_HALT: u32 = 5;
pub const PL_ACTION_ABORT: u32 = 6;
pub const PL_ACTION_WRITE: u32 = 8;
pub const PL_ACTION_FLUSH: u32 = 9;
pub const PL_ACTION_GUIAPP: u32 = 10;
pub const PL_ACTION_ATTACH_CONSOLE: u32 = 11;
pub const PL_GMP_SET_ALLOC_FUNCTIONS: u32 = 12;
pub const PL_ACTION_TRADITIONAL: u32 = 13;
pub const PL_BT_SAFE: u32 = 1;
pub const PL_BT_USER: u32 = 2;
pub const PL_VERSION_SYSTEM: u32 = 1;
pub const PL_VERSION_FLI: u32 = 2;
pub const PL_VERSION_REC: u32 = 3;
pub const PL_VERSION_QLF: u32 = 4;
pub const PL_VERSION_QLF_LOAD: u32 = 5;
pub const PL_VERSION_VM: u32 = 6;
pub const PL_VERSION_BUILT_IN: u32 = 7;
pub const PL_QUERY_ARGC: u32 = 1;
pub const PL_QUERY_ARGV: u32 = 2;
pub const PL_QUERY_GETC: u32 = 5;
pub const PL_QUERY_MAX_INTEGER: u32 = 6;
pub const PL_QUERY_MIN_INTEGER: u32 = 7;
pub const PL_QUERY_MAX_TAGGED_INT: u32 = 8;
pub const PL_QUERY_MIN_TAGGED_INT: u32 = 9;
pub const PL_QUERY_VERSION: u32 = 10;
pub const PL_QUERY_MAX_THREADS: u32 = 11;
pub const PL_QUERY_ENCODING: u32 = 12;
pub const PL_QUERY_USER_CPU: u32 = 13;
pub const PL_QUERY_HALTING: u32 = 14;
pub const PL_THREAD_NO_DEBUG: u32 = 1;
pub const PL_THREAD_NOT_DETACHED: u32 = 2;
pub const PL_ENGINE_SET: u32 = 0;
pub const PL_ENGINE_INVAL: u32 = 2;
pub const PL_ENGINE_INUSE: u32 = 3;
pub const PL_HT_NEW: u32 = 1;
pub const PL_HT_UPDATE: u32 = 2;
pub const PL_ARITY_AS_SIZE: u32 = 1;
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub type size_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_uint;
pub const idtype_t_P_ALL: idtype_t = 0;
pub const idtype_t_P_PID: idtype_t = 1;
pub const idtype_t_P_PGID: idtype_t = 2;
pub type idtype_t = ::std::os::raw::c_uint;
pub type _Float128 = u128;
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> size_t;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_uint;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_int;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type ssize_t = __ssize_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fd_set>())).__fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[test]
fn bindgen_test_layout___pthread_internal_slist() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_slist>())).__next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_slist),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_int,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__owner as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__nusers as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__kind as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__spins as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__list as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __pad1: ::std::os::raw::c_ulong,
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__readers as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__wrphase_futex as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers_futex as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad3 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad4 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__cur_writer as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__shared as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad1 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad2 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ::std::os::raw::c_ulonglong,
    pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq32)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: ::std::os::raw::c_ulonglong,
    pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start32 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start32)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_refs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g1_orig_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__wrefs as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_signals as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: [u32; 2usize],
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: [u32; 2usize],
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 64usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 8usize],
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        64usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 6usize],
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 6usize],
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: [u32; 2usize],
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    assert_eq!(
        ::std::mem::size_of::<random_data>(),
        48usize,
        concat!("Size of: ", stringify!(random_data))
    );
    assert_eq!(
        ::std::mem::align_of::<random_data>(),
        8usize,
        concat!("Alignment of ", stringify!(random_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).fptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(fptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).state as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_type as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_deg as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_deg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_sep as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_sep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).end_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(end_ptr)
        )
    );
}
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: size_t,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    assert_eq!(
        ::std::mem::size_of::<drand48_data>(),
        24usize,
        concat!("Size of: ", stringify!(drand48_data))
    );
    assert_eq!(
        ::std::mem::align_of::<drand48_data>(),
        8usize,
        concat!("Alignment of ", stringify!(drand48_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__old_x as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__old_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__c as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__init as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__a as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__a)
        )
    );
}
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        __nmemb: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn reallocarray(
        __ptr: *mut ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn alloca(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: size_t,
        __size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(__alignment: size_t, __size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
        __compar: __compar_fn_t,
    );
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long, __denom: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qecvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qfcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qgcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qecvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qfcvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(
        __pwc: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(
        __pwcs: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn wcstombs(
        __s: *mut ::std::os::raw::c_char,
        __pwcs: *const wchar_t,
        __n: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type __gwchar_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_imaxdiv_t() {
    assert_eq!(
        ::std::mem::size_of::<imaxdiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<imaxdiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imaxdiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imaxdiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn imaxabs(__n: intmax_t) -> intmax_t;
}
extern "C" {
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
extern "C" {
    pub fn strtoimax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn strtoumax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
pub type atom_t = usize;
pub type functor_t = usize;
pub type module_t = *mut ::std::os::raw::c_void;
pub type predicate_t = *mut ::std::os::raw::c_void;
pub type record_t = *mut ::std::os::raw::c_void;
pub type term_t = usize;
pub type qid_t = usize;
pub type PL_fid_t = usize;
pub type control_t = *mut ::std::os::raw::c_void;
pub type PL_engine_t = *mut ::std::os::raw::c_void;
pub type PL_atomic_t = usize;
pub type foreign_t = usize;
pub type pl_wchar_t = wchar_t;
pub type pl_function_t = ::std::option::Option<unsafe extern "C" fn() -> foreign_t>;
pub type buf_mark_t = usize;
#[repr(C)]
#[derive(Copy, Clone)]
pub union term_value_t {
    pub i: i64,
    pub f: f64,
    pub s: *mut ::std::os::raw::c_char,
    pub a: atom_t,
    pub t: term_value_t__bindgen_ty_1,
    _bindgen_union_align: [u64; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct term_value_t__bindgen_ty_1 {
    pub name: atom_t,
    pub arity: size_t,
}
#[test]
fn bindgen_test_layout_term_value_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<term_value_t__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(term_value_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<term_value_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(term_value_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<term_value_t__bindgen_ty_1>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(term_value_t__bindgen_ty_1),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<term_value_t__bindgen_ty_1>())).arity as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(term_value_t__bindgen_ty_1),
            "::",
            stringify!(arity)
        )
    );
}
#[test]
fn bindgen_test_layout_term_value_t() {
    assert_eq!(
        ::std::mem::size_of::<term_value_t>(),
        16usize,
        concat!("Size of: ", stringify!(term_value_t))
    );
    assert_eq!(
        ::std::mem::align_of::<term_value_t>(),
        8usize,
        concat!("Alignment of ", stringify!(term_value_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<term_value_t>())).i as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(term_value_t),
            "::",
            stringify!(i)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<term_value_t>())).f as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(term_value_t),
            "::",
            stringify!(f)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<term_value_t>())).s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(term_value_t),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<term_value_t>())).a as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(term_value_t),
            "::",
            stringify!(a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<term_value_t>())).t as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(term_value_t),
            "::",
            stringify!(t)
        )
    );
}
extern "C" {
    pub fn _PL_retry(arg1: isize) -> foreign_t;
}
extern "C" {
    pub fn _PL_retry_address(arg1: *mut ::std::os::raw::c_void) -> foreign_t;
}
extern "C" {
    pub fn PL_foreign_control(arg1: control_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_foreign_context(arg1: control_t) -> isize;
}
extern "C" {
    pub fn PL_foreign_context_address(arg1: control_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn PL_foreign_context_predicate(arg1: control_t) -> predicate_t;
}
#[doc = "      REGISTERING FOREIGNS     *"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PL_extension {
    pub predicate_name: *const ::std::os::raw::c_char,
    pub arity: ::std::os::raw::c_short,
    pub function: pl_function_t,
    pub flags: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_PL_extension() {
    assert_eq!(
        ::std::mem::size_of::<PL_extension>(),
        32usize,
        concat!("Size of: ", stringify!(PL_extension))
    );
    assert_eq!(
        ::std::mem::align_of::<PL_extension>(),
        8usize,
        concat!("Alignment of ", stringify!(PL_extension))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PL_extension>())).predicate_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PL_extension),
            "::",
            stringify!(predicate_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PL_extension>())).arity as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PL_extension),
            "::",
            stringify!(arity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PL_extension>())).function as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PL_extension),
            "::",
            stringify!(function)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PL_extension>())).flags as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PL_extension),
            "::",
            stringify!(flags)
        )
    );
}
extern "C" {
    pub static mut PL_extensions: [PL_extension; 0usize];
}
extern "C" {
    pub fn PL_register_extensions(e: *const PL_extension);
}
extern "C" {
    pub fn PL_register_extensions_in_module(
        module: *const ::std::os::raw::c_char,
        e: *const PL_extension,
    );
}
extern "C" {
    pub fn PL_register_foreign(
        name: *const ::std::os::raw::c_char,
        arity: ::std::os::raw::c_int,
        func: pl_function_t,
        flags: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_register_foreign_in_module(
        module: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        arity: ::std::os::raw::c_int,
        func: pl_function_t,
        flags: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_load_extensions(e: *const PL_extension);
}
extern "C" {
    #[doc = "\t      LICENSE\t\t*"]
    pub fn PL_license(
        license: *const ::std::os::raw::c_char,
        module: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[doc = "            MODULES            *"]
    pub fn PL_context() -> module_t;
}
extern "C" {
    pub fn PL_module_name(module: module_t) -> atom_t;
}
extern "C" {
    pub fn PL_new_module(name: atom_t) -> module_t;
}
extern "C" {
    pub fn PL_strip_module(in_: term_t, m: *mut module_t, out: term_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "\t     CONSTANTS\t\t*"]
    pub fn _PL_atoms() -> *const atom_t;
}
extern "C" {
    pub fn PL_open_foreign_frame() -> PL_fid_t;
}
extern "C" {
    pub fn PL_rewind_foreign_frame(cid: PL_fid_t);
}
extern "C" {
    pub fn PL_close_foreign_frame(cid: PL_fid_t);
}
extern "C" {
    pub fn PL_discard_foreign_frame(cid: PL_fid_t);
}
extern "C" {
    pub fn PL_pred(f: functor_t, m: module_t) -> predicate_t;
}
extern "C" {
    pub fn PL_predicate(
        name: *const ::std::os::raw::c_char,
        arity: ::std::os::raw::c_int,
        module: *const ::std::os::raw::c_char,
    ) -> predicate_t;
}
extern "C" {
    pub fn PL_predicate_info(
        pred: predicate_t,
        name: *mut atom_t,
        arity: *mut size_t,
        module: *mut module_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_open_query(
        m: module_t,
        flags: ::std::os::raw::c_int,
        pred: predicate_t,
        t0: term_t,
    ) -> qid_t;
}
extern "C" {
    pub fn PL_next_solution(qid: qid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_close_query(qid: qid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_cut_query(qid: qid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_current_query() -> qid_t;
}
extern "C" {
    pub fn PL_call(t: term_t, m: module_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_call_predicate(
        m: module_t,
        debug: ::std::os::raw::c_int,
        pred: predicate_t,
        t0: term_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_exception(qid: qid_t) -> term_t;
}
extern "C" {
    pub fn PL_raise_exception(exception: term_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_throw(exception: term_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_clear_exception();
}
extern "C" {
    pub fn PL_yielded(qid: qid_t) -> term_t;
}
extern "C" {
    pub fn PL_assert(
        term: term_t,
        m: module_t,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "        TERM-REFERENCES\t*"]
    pub fn PL_new_term_refs(n: ::std::os::raw::c_int) -> term_t;
}
extern "C" {
    pub fn PL_new_term_ref() -> term_t;
}
extern "C" {
    pub fn PL_copy_term_ref(from: term_t) -> term_t;
}
extern "C" {
    pub fn PL_reset_term_refs(r: term_t);
}
extern "C" {
    pub fn PL_new_atom(s: *const ::std::os::raw::c_char) -> atom_t;
}
extern "C" {
    pub fn PL_new_atom_nchars(len: size_t, s: *const ::std::os::raw::c_char) -> atom_t;
}
extern "C" {
    pub fn PL_new_atom_wchars(len: size_t, s: *const pl_wchar_t) -> atom_t;
}
extern "C" {
    pub fn PL_new_atom_mbchars(
        rep: ::std::os::raw::c_int,
        len: size_t,
        s: *const ::std::os::raw::c_char,
    ) -> atom_t;
}
extern "C" {
    pub fn PL_atom_chars(a: atom_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn PL_atom_nchars(a: atom_t, len: *mut size_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn PL_atom_wchars(a: atom_t, len: *mut size_t) -> *const wchar_t;
}
extern "C" {
    pub fn PL_register_atom(a: atom_t);
}
extern "C" {
    pub fn PL_unregister_atom(a: atom_t);
}
extern "C" {
    pub fn PL_new_functor_sz(f: atom_t, a: size_t) -> functor_t;
}
extern "C" {
    pub fn PL_new_functor(f: atom_t, a: ::std::os::raw::c_int) -> functor_t;
}
extern "C" {
    pub fn PL_functor_name(f: functor_t) -> atom_t;
}
extern "C" {
    pub fn PL_functor_arity(f: functor_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_functor_arity_sz(f: functor_t) -> size_t;
}
extern "C" {
    pub fn PL_get_atom(t: term_t, a: *mut atom_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_get_bool(t: term_t, value: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_get_atom_chars(
        t: term_t,
        a: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_get_string(
        t: term_t,
        s: *mut *mut ::std::os::raw::c_char,
        len: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_get_chars(
        t: term_t,
        s: *mut *mut ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_get_list_chars(
        l: term_t,
        s: *mut *mut ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_get_atom_nchars(
        t: term_t,
        len: *mut size_t,
        a: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_get_list_nchars(
        l: term_t,
        len: *mut size_t,
        s: *mut *mut ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_get_nchars(
        t: term_t,
        len: *mut size_t,
        s: *mut *mut ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_get_integer(t: term_t, i: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_get_long(t: term_t, i: *mut ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_get_intptr(t: term_t, i: *mut isize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_get_pointer(
        t: term_t,
        ptr: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_get_float(t: term_t, f: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_get_functor(t: term_t, f: *mut functor_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_get_name_arity_sz(
        t: term_t,
        name: *mut atom_t,
        arity: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_get_compound_name_arity_sz(
        t: term_t,
        name: *mut atom_t,
        arity: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_get_name_arity(
        t: term_t,
        name: *mut atom_t,
        arity: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_get_compound_name_arity(
        t: term_t,
        name: *mut atom_t,
        arity: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_get_module(t: term_t, module: *mut module_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_get_arg_sz(index: size_t, t: term_t, a: term_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_get_arg(index: ::std::os::raw::c_int, t: term_t, a: term_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_get_dict_key(key: atom_t, dict: term_t, value: term_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_get_list(l: term_t, h: term_t, t: term_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_get_head(l: term_t, h: term_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_get_tail(l: term_t, t: term_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_get_nil(l: term_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_get_term_value(t: term_t, v: *mut term_value_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_quote(
        chr: ::std::os::raw::c_int,
        data: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn PL_term_type(t: term_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_is_variable(t: term_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_is_ground(t: term_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_is_atom(t: term_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_is_integer(t: term_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_is_string(t: term_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_is_float(t: term_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_is_rational(t: term_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_is_compound(t: term_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_is_callable(t: term_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_is_functor(t: term_t, f: functor_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_is_list(t: term_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_is_dict(t: term_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_is_pair(t: term_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_is_atomic(t: term_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_is_number(t: term_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_is_acyclic(t: term_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_put_variable(t: term_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_put_atom(t: term_t, a: atom_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_put_bool(t: term_t, val: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_put_atom_chars(
        t: term_t,
        chars: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_put_string_chars(
        t: term_t,
        chars: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_put_chars(
        t: term_t,
        flags: ::std::os::raw::c_int,
        len: size_t,
        chars: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_put_list_chars(
        t: term_t,
        chars: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_put_list_codes(
        t: term_t,
        chars: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_put_atom_nchars(
        t: term_t,
        l: size_t,
        chars: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_put_string_nchars(
        t: term_t,
        len: size_t,
        chars: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_put_list_nchars(
        t: term_t,
        l: size_t,
        chars: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_put_list_ncodes(
        t: term_t,
        l: size_t,
        chars: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_put_integer(t: term_t, i: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_put_pointer(t: term_t, ptr: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_put_float(t: term_t, f: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_put_functor(t: term_t, functor: functor_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_put_list(l: term_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_put_nil(l: term_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_put_term(t1: term_t, t2: term_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_put_dict(
        t: term_t,
        tag: atom_t,
        len: size_t,
        keys: *const atom_t,
        values: term_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_cons_functor(h: term_t, f: functor_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_cons_functor_v(h: term_t, fd: functor_t, a0: term_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_cons_list(l: term_t, h: term_t, t: term_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_unify(t1: term_t, t2: term_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_unify_atom(t: term_t, a: atom_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_unify_atom_chars(
        t: term_t,
        chars: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_unify_list_chars(
        t: term_t,
        chars: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_unify_list_codes(
        t: term_t,
        chars: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_unify_string_chars(
        t: term_t,
        chars: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_unify_atom_nchars(
        t: term_t,
        l: size_t,
        s: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_unify_list_ncodes(
        t: term_t,
        l: size_t,
        s: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_unify_list_nchars(
        t: term_t,
        l: size_t,
        s: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_unify_string_nchars(
        t: term_t,
        len: size_t,
        chars: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_unify_bool(t: term_t, n: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_unify_integer(t: term_t, n: isize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_unify_float(t: term_t, f: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_unify_pointer(t: term_t, ptr: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_unify_functor(t: term_t, f: functor_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_unify_compound(t: term_t, f: functor_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_unify_list(l: term_t, h: term_t, t: term_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_unify_nil(l: term_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_unify_arg_sz(index: size_t, t: term_t, a: term_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_unify_arg(
        index: ::std::os::raw::c_int,
        t: term_t,
        a: term_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_unify_term(t: term_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_unify_chars(
        t: term_t,
        flags: ::std::os::raw::c_int,
        len: size_t,
        s: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "\t       LISTS\t\t*"]
    pub fn PL_skip_list(list: term_t, tail: term_t, len: *mut size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "    WIDE CHARACTER VERSIONS\t*"]
    pub fn PL_unify_wchars(
        t: term_t,
        type_: ::std::os::raw::c_int,
        len: size_t,
        s: *const pl_wchar_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_unify_wchars_diff(
        t: term_t,
        tail: term_t,
        type_: ::std::os::raw::c_int,
        len: size_t,
        s: *const pl_wchar_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_get_wchars(
        l: term_t,
        length: *mut size_t,
        s: *mut *mut pl_wchar_t,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_utf8_strlen(s: *const ::std::os::raw::c_char, len: size_t) -> size_t;
}
extern "C" {
    #[doc = "\t   WIDE INTEGERS\t*"]
    pub fn PL_get_int64(t: term_t, i: *mut i64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_unify_int64(t: term_t, value: i64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_unify_uint64(t: term_t, value: u64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_put_int64(t: term_t, i: i64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_put_uint64(t: term_t, i: u64) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "     ATTRIBUTED VARIABLES\t*"]
    pub fn PL_is_attvar(t: term_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_get_attr(v: term_t, a: term_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "\t      ERRORS\t\t*"]
    pub fn PL_get_atom_ex(t: term_t, a: *mut atom_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_get_integer_ex(t: term_t, i: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_get_long_ex(t: term_t, i: *mut ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_get_int64_ex(t: term_t, i: *mut i64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_get_intptr_ex(t: term_t, i: *mut isize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_get_size_ex(t: term_t, i: *mut size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_get_bool_ex(t: term_t, i: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_get_float_ex(t: term_t, f: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_get_char_ex(
        t: term_t,
        p: *mut ::std::os::raw::c_int,
        eof: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_unify_bool_ex(t: term_t, val: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_get_pointer_ex(
        t: term_t,
        addrp: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_unify_list_ex(l: term_t, h: term_t, t: term_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_unify_nil_ex(l: term_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_get_list_ex(l: term_t, h: term_t, t: term_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_get_nil_ex(l: term_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_instantiation_error(culprit: term_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_uninstantiation_error(culprit: term_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_representation_error(
        resource: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_type_error(
        expected: *const ::std::os::raw::c_char,
        culprit: term_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_domain_error(
        expected: *const ::std::os::raw::c_char,
        culprit: term_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_existence_error(
        type_: *const ::std::os::raw::c_char,
        culprit: term_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_permission_error(
        operation: *const ::std::os::raw::c_char,
        type_: *const ::std::os::raw::c_char,
        culprit: term_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_resource_error(resource: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_syntax_error(
        msg: *const ::std::os::raw::c_char,
        in_: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PL_blob_t {
    pub magic: usize,
    pub flags: usize,
    pub name: *mut ::std::os::raw::c_char,
    pub release: ::std::option::Option<unsafe extern "C" fn(a: atom_t) -> ::std::os::raw::c_int>,
    pub compare:
        ::std::option::Option<unsafe extern "C" fn(a: atom_t, b: atom_t) -> ::std::os::raw::c_int>,
    pub write: ::std::option::Option<
        unsafe extern "C" fn(
            s: *mut ::std::os::raw::c_void,
            a: atom_t,
            flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub acquire: ::std::option::Option<unsafe extern "C" fn(a: atom_t)>,
    pub save: ::std::option::Option<
        unsafe extern "C" fn(a: atom_t, arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub load: ::std::option::Option<unsafe extern "C" fn(s: *mut ::std::os::raw::c_void) -> atom_t>,
    pub padding: size_t,
    pub reserved: [*mut ::std::os::raw::c_void; 9usize],
    pub registered: ::std::os::raw::c_int,
    pub rank: ::std::os::raw::c_int,
    pub next: *mut PL_blob_t,
    pub atom_name: atom_t,
}
#[test]
fn bindgen_test_layout_PL_blob_t() {
    assert_eq!(
        ::std::mem::size_of::<PL_blob_t>(),
        176usize,
        concat!("Size of: ", stringify!(PL_blob_t))
    );
    assert_eq!(
        ::std::mem::align_of::<PL_blob_t>(),
        8usize,
        concat!("Alignment of ", stringify!(PL_blob_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PL_blob_t>())).magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PL_blob_t),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PL_blob_t>())).flags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PL_blob_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PL_blob_t>())).name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PL_blob_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PL_blob_t>())).release as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PL_blob_t),
            "::",
            stringify!(release)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PL_blob_t>())).compare as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PL_blob_t),
            "::",
            stringify!(compare)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PL_blob_t>())).write as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PL_blob_t),
            "::",
            stringify!(write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PL_blob_t>())).acquire as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(PL_blob_t),
            "::",
            stringify!(acquire)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PL_blob_t>())).save as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(PL_blob_t),
            "::",
            stringify!(save)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PL_blob_t>())).load as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(PL_blob_t),
            "::",
            stringify!(load)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PL_blob_t>())).padding as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(PL_blob_t),
            "::",
            stringify!(padding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PL_blob_t>())).reserved as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(PL_blob_t),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PL_blob_t>())).registered as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(PL_blob_t),
            "::",
            stringify!(registered)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PL_blob_t>())).rank as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(PL_blob_t),
            "::",
            stringify!(rank)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PL_blob_t>())).next as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(PL_blob_t),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PL_blob_t>())).atom_name as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(PL_blob_t),
            "::",
            stringify!(atom_name)
        )
    );
}
extern "C" {
    pub fn PL_is_blob(t: term_t, type_: *mut *mut PL_blob_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_unify_blob(
        t: term_t,
        blob: *mut ::std::os::raw::c_void,
        len: size_t,
        type_: *mut PL_blob_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_put_blob(
        t: term_t,
        blob: *mut ::std::os::raw::c_void,
        len: size_t,
        type_: *mut PL_blob_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_get_blob(
        t: term_t,
        blob: *mut *mut ::std::os::raw::c_void,
        len: *mut size_t,
        type_: *mut *mut PL_blob_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_blob_data(
        a: atom_t,
        len: *mut size_t,
        type_: *mut *mut PL_blob_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn PL_register_blob_type(type_: *mut PL_blob_t);
}
extern "C" {
    pub fn PL_find_blob_type(name: *const ::std::os::raw::c_char) -> *mut PL_blob_t;
}
extern "C" {
    pub fn PL_unregister_blob_type(type_: *mut PL_blob_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_get_file_name(
        n: term_t,
        name: *mut *mut ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_get_file_nameW(
        n: term_t,
        name: *mut *mut wchar_t,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_changed_cwd();
}
extern "C" {
    pub fn PL_cwd(buf: *mut ::std::os::raw::c_char, buflen: size_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[doc = "    QUINTUS/SICSTUS WRAPPER\t*"]
    pub fn PL_cvt_i_char(p: term_t, c: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_cvt_i_uchar(p: term_t, c: *mut ::std::os::raw::c_uchar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_cvt_i_short(p: term_t, s: *mut ::std::os::raw::c_short) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_cvt_i_ushort(p: term_t, s: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_cvt_i_int(p: term_t, c: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_cvt_i_uint(p: term_t, c: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_cvt_i_long(p: term_t, c: *mut ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_cvt_i_ulong(p: term_t, c: *mut ::std::os::raw::c_ulong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_cvt_i_int64(p: term_t, c: *mut i64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_cvt_i_uint64(p: term_t, c: *mut u64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_cvt_i_size_t(p: term_t, c: *mut size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_cvt_i_float(p: term_t, c: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_cvt_i_single(p: term_t, c: *mut f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_cvt_i_string(p: term_t, c: *mut *mut ::std::os::raw::c_char)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_cvt_i_codes(p: term_t, c: *mut *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_cvt_i_atom(p: term_t, c: *mut atom_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_cvt_i_address(p: term_t, c: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_cvt_o_int64(c: i64, p: term_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_cvt_o_float(c: f64, p: term_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_cvt_o_single(c: f32, p: term_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_cvt_o_string(c: *const ::std::os::raw::c_char, p: term_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_cvt_o_codes(c: *const ::std::os::raw::c_char, p: term_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_cvt_o_atom(c: atom_t, p: term_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_cvt_o_address(
        address: *mut ::std::os::raw::c_void,
        p: term_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_new_nil_ref() -> term_t;
}
extern "C" {
    pub fn PL_cvt_encoding() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_cvt_set_encoding(enc: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SP_set_state(state: ::std::os::raw::c_int);
}
extern "C" {
    pub fn SP_get_state() -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "\t     COMPARE\t\t*"]
    pub fn PL_compare(t1: term_t, t2: term_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_same_compound(t1: term_t, t2: term_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "\t     MESSAGES\t\t*"]
    pub fn PL_warning(fmt: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_fatal_error(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    #[doc = "      RECORDED DATABASE\t*"]
    pub fn PL_record(term: term_t) -> record_t;
}
extern "C" {
    pub fn PL_recorded(record: record_t, term: term_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_erase(record: record_t);
}
extern "C" {
    pub fn PL_duplicate_record(r: record_t) -> record_t;
}
extern "C" {
    pub fn PL_record_external(t: term_t, size: *mut size_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn PL_recorded_external(
        rec: *const ::std::os::raw::c_char,
        term: term_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_erase_external(rec: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_set_prolog_flag(
        name: *const ::std::os::raw::c_char,
        type_: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "\tINTERNAL FUNCTIONS\t*"]
    pub fn _PL_get_atomic(t: term_t) -> PL_atomic_t;
}
extern "C" {
    pub fn _PL_put_atomic(t: term_t, a: PL_atomic_t);
}
extern "C" {
    pub fn _PL_unify_atomic(t: term_t, a: PL_atomic_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _PL_get_arg_sz(index: size_t, t: term_t, a: term_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _PL_get_arg(index: ::std::os::raw::c_int, t: term_t, a: term_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_mark_string_buffers(mark: *mut buf_mark_t);
}
extern "C" {
    pub fn PL_release_string_buffers_from_mark(mark: buf_mark_t);
}
extern "C" {
    pub fn PL_put_term_from_chars(
        t: term_t,
        flags: ::std::os::raw::c_int,
        len: size_t,
        s: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_chars_to_term(
        chars: *const ::std::os::raw::c_char,
        term: term_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_wchars_to_term(chars: *const pl_wchar_t, term: term_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "\t    EMBEDDING\t\t*"]
    pub fn PL_initialise(
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_winitialise(
        argc: ::std::os::raw::c_int,
        argv: *mut *mut wchar_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_is_initialised(
        argc: *mut ::std::os::raw::c_int,
        argv: *mut *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_set_resource_db_mem(
        data: *const ::std::os::raw::c_uchar,
        size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_toplevel() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_cleanup(status: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_cleanup_fork();
}
extern "C" {
    pub fn PL_halt(status: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "\t  DYNAMIC LINKING\t*"]
    pub fn PL_dlopen(
        file: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn PL_dlerror() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn PL_dlsym(
        handle: *mut ::std::os::raw::c_void,
        symbol: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn PL_dlclose(handle: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_dispatch(
        fd: ::std::os::raw::c_int,
        wait: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_add_to_protocol(buf: *const ::std::os::raw::c_char, count: size_t);
}
extern "C" {
    pub fn PL_prompt_string(fd: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn PL_write_prompt(dowrite: ::std::os::raw::c_int);
}
extern "C" {
    pub fn PL_prompt_next(fd: ::std::os::raw::c_int);
}
extern "C" {
    pub fn PL_atom_generator(
        prefix: *const ::std::os::raw::c_char,
        state: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn PL_atom_generator_w(
        pref: *const pl_wchar_t,
        buffer: *mut pl_wchar_t,
        buflen: size_t,
        state: ::std::os::raw::c_int,
    ) -> *mut pl_wchar_t;
}
extern "C" {
    #[doc = "\tMEMORY ALLOCATION\t*"]
    pub fn PL_malloc(size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn PL_malloc_atomic(size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn PL_malloc_uncollectable(size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn PL_malloc_atomic_uncollectable(size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn PL_realloc(
        mem: *mut ::std::os::raw::c_void,
        size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn PL_malloc_unmanaged(size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn PL_malloc_atomic_unmanaged(size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn PL_free(mem: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn PL_linger(mem: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
pub type PL_dispatch_hook_t =
    ::std::option::Option<unsafe extern "C" fn(fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int>;
pub type PL_abort_hook_t = ::std::option::Option<unsafe extern "C" fn()>;
pub type PL_initialise_hook_t = ::std::option::Option<
    unsafe extern "C" fn(argc: ::std::os::raw::c_int, argv: *mut *mut ::std::os::raw::c_char),
>;
pub type PL_agc_hook_t =
    ::std::option::Option<unsafe extern "C" fn(a: atom_t) -> ::std::os::raw::c_int>;
extern "C" {
    pub fn PL_dispatch_hook(arg1: PL_dispatch_hook_t) -> PL_dispatch_hook_t;
}
extern "C" {
    pub fn PL_abort_hook(arg1: PL_abort_hook_t);
}
extern "C" {
    pub fn PL_initialise_hook(arg1: PL_initialise_hook_t);
}
extern "C" {
    pub fn PL_abort_unhook(arg1: PL_abort_hook_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_agc_hook(arg1: PL_agc_hook_t) -> PL_agc_hook_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pl_sigaction {
    pub sa_cfunction: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    pub sa_predicate: predicate_t,
    pub sa_flags: ::std::os::raw::c_int,
    pub reserved: [*mut ::std::os::raw::c_void; 2usize],
}
#[test]
fn bindgen_test_layout_pl_sigaction() {
    assert_eq!(
        ::std::mem::size_of::<pl_sigaction>(),
        40usize,
        concat!("Size of: ", stringify!(pl_sigaction))
    );
    assert_eq!(
        ::std::mem::align_of::<pl_sigaction>(),
        8usize,
        concat!("Alignment of ", stringify!(pl_sigaction))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pl_sigaction>())).sa_cfunction as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pl_sigaction),
            "::",
            stringify!(sa_cfunction)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pl_sigaction>())).sa_predicate as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pl_sigaction),
            "::",
            stringify!(sa_predicate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pl_sigaction>())).sa_flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pl_sigaction),
            "::",
            stringify!(sa_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pl_sigaction>())).reserved as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pl_sigaction),
            "::",
            stringify!(reserved)
        )
    );
}
pub type pl_sigaction_t = pl_sigaction;
extern "C" {
    pub fn PL_signal(
        sig: ::std::os::raw::c_int,
        func: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            sig: ::std::os::raw::c_int,
            func: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
        ),
    >;
}
extern "C" {
    pub fn PL_sigaction(
        sig: ::std::os::raw::c_int,
        act: *mut pl_sigaction_t,
        old: *mut pl_sigaction_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_interrupt(sig: ::std::os::raw::c_int);
}
extern "C" {
    pub fn PL_raise(sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_handle_signals() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_get_signum_ex(sig: term_t, n: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_action(arg1: ::std::os::raw::c_int, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_on_halt(
        arg1: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_int,
                arg2: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        arg2: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn PL_exit_hook(
        arg1: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_int,
                arg2: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        arg2: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn PL_backtrace(depth: ::std::os::raw::c_int, flags: ::std::os::raw::c_int);
}
extern "C" {
    pub fn PL_backtrace_string(
        depth: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn PL_check_data(data: term_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_check_stacks() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_current_prolog_flag(
        name: atom_t,
        type_: ::std::os::raw::c_int,
        ptr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_version(which: ::std::os::raw::c_int) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn PL_query(arg1: ::std::os::raw::c_int) -> isize;
}
pub const rc_cancel_PL_THREAD_CANCEL_FAILED: rc_cancel = 0;
pub const rc_cancel_PL_THREAD_CANCEL_JOINED: rc_cancel = 1;
pub const rc_cancel_PL_THREAD_CANCEL_MUST_JOIN: rc_cancel = 2;
pub type rc_cancel = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PL_thread_attr_t {
    pub stack_limit: size_t,
    pub table_space: size_t,
    pub alias: *mut ::std::os::raw::c_char,
    pub cancel: ::std::option::Option<unsafe extern "C" fn(id: ::std::os::raw::c_int) -> rc_cancel>,
    pub flags: isize,
    pub max_queue_size: size_t,
    pub reserved: [*mut ::std::os::raw::c_void; 3usize],
}
#[test]
fn bindgen_test_layout_PL_thread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<PL_thread_attr_t>(),
        72usize,
        concat!("Size of: ", stringify!(PL_thread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<PL_thread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(PL_thread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PL_thread_attr_t>())).stack_limit as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PL_thread_attr_t),
            "::",
            stringify!(stack_limit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PL_thread_attr_t>())).table_space as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PL_thread_attr_t),
            "::",
            stringify!(table_space)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PL_thread_attr_t>())).alias as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PL_thread_attr_t),
            "::",
            stringify!(alias)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PL_thread_attr_t>())).cancel as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PL_thread_attr_t),
            "::",
            stringify!(cancel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PL_thread_attr_t>())).flags as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PL_thread_attr_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PL_thread_attr_t>())).max_queue_size as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PL_thread_attr_t),
            "::",
            stringify!(max_queue_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PL_thread_attr_t>())).reserved as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(PL_thread_attr_t),
            "::",
            stringify!(reserved)
        )
    );
}
extern "C" {
    pub fn PL_thread_self() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_unify_thread_id(t: term_t, i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_get_thread_id_ex(t: term_t, idp: *mut ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_get_thread_alias(
        tid: ::std::os::raw::c_int,
        alias: *mut atom_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_thread_attach_engine(attr: *mut PL_thread_attr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_thread_destroy_engine() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_thread_at_exit(
        function: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        closure: *mut ::std::os::raw::c_void,
        global: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_thread_raise(
        tid: ::std::os::raw::c_int,
        sig: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_create_engine(attributes: *mut PL_thread_attr_t) -> PL_engine_t;
}
extern "C" {
    pub fn PL_set_engine(engine: PL_engine_t, old: *mut PL_engine_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_destroy_engine(engine: PL_engine_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pl_hash_table {
    _unused: [u8; 0],
}
pub type hash_table_t = *mut pl_hash_table;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pl_hash_table_enum {
    _unused: [u8; 0],
}
pub type hash_table_enum_t = *mut pl_hash_table_enum;
extern "C" {
    pub fn PL_new_hash_table(
        size: ::std::os::raw::c_int,
        free_symbol: ::std::option::Option<
            unsafe extern "C" fn(n: *mut ::std::os::raw::c_void, v: *mut ::std::os::raw::c_void),
        >,
    ) -> hash_table_t;
}
extern "C" {
    pub fn PL_free_hash_table(table: hash_table_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_lookup_hash_table(
        table: hash_table_t,
        key: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn PL_add_hash_table(
        table: hash_table_t,
        key: *mut ::std::os::raw::c_void,
        value: *mut ::std::os::raw::c_void,
        flags: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn PL_del_hash_table(
        table: hash_table_t,
        key: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn PL_clear_hash_table(table: hash_table_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_new_hash_table_enum(table: hash_table_t) -> hash_table_enum_t;
}
extern "C" {
    pub fn PL_free_hash_table_enum(e: hash_table_enum_t);
}
extern "C" {
    pub fn PL_advance_hash_table_enum(
        e: hash_table_enum_t,
        key: *mut *mut ::std::os::raw::c_void,
        value: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
#[doc = "\t     PROFILER\t\t*"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PL_prof_type_t {
    pub unify: ::std::option::Option<
        unsafe extern "C" fn(
            t: term_t,
            handle: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub get: ::std::option::Option<
        unsafe extern "C" fn(
            t: term_t,
            handle: *mut *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub activate: ::std::option::Option<unsafe extern "C" fn(active: ::std::os::raw::c_int)>,
    pub magic: isize,
}
#[test]
fn bindgen_test_layout_PL_prof_type_t() {
    assert_eq!(
        ::std::mem::size_of::<PL_prof_type_t>(),
        32usize,
        concat!("Size of: ", stringify!(PL_prof_type_t))
    );
    assert_eq!(
        ::std::mem::align_of::<PL_prof_type_t>(),
        8usize,
        concat!("Alignment of ", stringify!(PL_prof_type_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PL_prof_type_t>())).unify as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PL_prof_type_t),
            "::",
            stringify!(unify)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PL_prof_type_t>())).get as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PL_prof_type_t),
            "::",
            stringify!(get)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PL_prof_type_t>())).activate as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PL_prof_type_t),
            "::",
            stringify!(activate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PL_prof_type_t>())).magic as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PL_prof_type_t),
            "::",
            stringify!(magic)
        )
    );
}
extern "C" {
    pub fn PL_register_profile_type(type_: *mut PL_prof_type_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_prof_call(
        handle: *mut ::std::os::raw::c_void,
        type_: *mut PL_prof_type_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn PL_prof_exit(node: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[doc = "\t      DEBUG\t\t*"]
    pub fn PL_prolog_debug(topic: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_prolog_nodebug(topic: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
#[doc = "       FAST XPCE SUPPORT\t*"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xpceref_t {
    pub type_: ::std::os::raw::c_int,
    pub value: xpceref_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xpceref_t__bindgen_ty_1 {
    pub i: usize,
    pub a: atom_t,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_xpceref_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xpceref_t__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(xpceref_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<xpceref_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(xpceref_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpceref_t__bindgen_ty_1>())).i as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpceref_t__bindgen_ty_1),
            "::",
            stringify!(i)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpceref_t__bindgen_ty_1>())).a as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpceref_t__bindgen_ty_1),
            "::",
            stringify!(a)
        )
    );
}
#[test]
fn bindgen_test_layout_xpceref_t() {
    assert_eq!(
        ::std::mem::size_of::<xpceref_t>(),
        16usize,
        concat!("Size of: ", stringify!(xpceref_t))
    );
    assert_eq!(
        ::std::mem::align_of::<xpceref_t>(),
        8usize,
        concat!("Alignment of ", stringify!(xpceref_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpceref_t>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpceref_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpceref_t>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xpceref_t),
            "::",
            stringify!(value)
        )
    );
}
extern "C" {
    pub fn _PL_get_xpce_reference(t: term_t, ref_: *mut xpceref_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _PL_unify_xpce_reference(t: term_t, ref_: *mut xpceref_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _PL_put_xpce_reference_i(t: term_t, r: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _PL_put_xpce_reference_a(t: term_t, name: atom_t) -> ::std::os::raw::c_int;
}
pub type QueryFrame = *mut ::std::os::raw::c_void;
pub type LocalFrame = *mut ::std::os::raw::c_void;
pub type Code = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pl_context_t {
    pub ld: PL_engine_t,
    pub qf: QueryFrame,
    pub fr: LocalFrame,
    pub pc: Code,
    pub reserved: [*mut ::std::os::raw::c_void; 10usize],
}
#[test]
fn bindgen_test_layout_pl_context_t() {
    assert_eq!(
        ::std::mem::size_of::<pl_context_t>(),
        112usize,
        concat!("Size of: ", stringify!(pl_context_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pl_context_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pl_context_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pl_context_t>())).ld as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pl_context_t),
            "::",
            stringify!(ld)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pl_context_t>())).qf as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pl_context_t),
            "::",
            stringify!(qf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pl_context_t>())).fr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pl_context_t),
            "::",
            stringify!(fr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pl_context_t>())).pc as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pl_context_t),
            "::",
            stringify!(pc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pl_context_t>())).reserved as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pl_context_t),
            "::",
            stringify!(reserved)
        )
    );
}
extern "C" {
    pub fn PL_get_context(
        c: *mut pl_context_t,
        thead_id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_step_context(c: *mut pl_context_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PL_describe_context(
        c: *mut pl_context_t,
        buf: *mut ::std::os::raw::c_char,
        len: size_t,
    ) -> ::std::os::raw::c_int;
}
pub type __builtin_va_list = __va_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list {
    pub __stack: *mut ::std::os::raw::c_void,
    pub __gr_top: *mut ::std::os::raw::c_void,
    pub __vr_top: *mut ::std::os::raw::c_void,
    pub __gr_offs: ::std::os::raw::c_int,
    pub __vr_offs: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___va_list() {
    assert_eq!(
        ::std::mem::size_of::<__va_list>(),
        32usize,
        concat!("Size of: ", stringify!(__va_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list>())).__stack as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list),
            "::",
            stringify!(__stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list>())).__gr_top as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list),
            "::",
            stringify!(__gr_top)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list>())).__vr_top as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list),
            "::",
            stringify!(__vr_top)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list>())).__gr_offs as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list),
            "::",
            stringify!(__gr_offs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list>())).__vr_offs as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list),
            "::",
            stringify!(__vr_offs)
        )
    );
}
